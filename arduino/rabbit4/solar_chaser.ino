#define FRONT_PHOTORESISTOR_PIN 9
#define BACK_PHOTORESISTOR_PIN  10
#define LEFT_PHOTORESISTOR_PIN  13
#define RIGHT_PHOTORESISTOR_PIN 14

#define FRONT_PHOTORESISTOR_MIN 249
#define BACK_PHOTORESISTOR_MIN  167
#define LEFT_PHOTORESISTOR_MIN  214
#define RIGHT_PHOTORESISTOR_MIN 149
#define FRONT_PHOTORESISTOR_MAX 706
#define BACK_PHOTORESISTOR_MAX  756
#define LEFT_PHOTORESISTOR_MAX  821
#define RIGHT_PHOTORESISTOR_MAX 603
#define FRONT_PHOTORESISTOR_RATIO ((FRONT_PHOTORESISTOR_MAX - FRONT_PHOTORESISTOR_MIN) / 100.0)
#define BACK_PHOTORESISTOR_RATIO  ((BACK_PHOTORESISTOR_MAX - BACK_PHOTORESISTOR_MIN) / 100.0)
#define LEFT_PHOTORESISTOR_RATIO  ((LEFT_PHOTORESISTOR_MAX - LEFT_PHOTORESISTOR_MIN) / 100.0)
#define RIGHT_PHOTORESISTOR_RATIO ((RIGHT_PHOTORESISTOR_MAX - RIGHT_PHOTORESISTOR_MIN) / 100.0)

#define VELOCITY_FACTOR 1
#define MAX_LINEAR_VELOCITY 50


void chaser_setup() {
    pinMode(FRONT_PHOTORESISTOR_MAX, INPUT);
    pinMode(BACK_PHOTORESISTOR_MAX, INPUT);
    pinMode(LEFT_PHOTORESISTOR_MAX, INPUT);
    pinMode(RIGHT_PHOTORESISTOR_MAX, INPUT);
}

void chaser_loop() {
    double lx, ly, front_percentage, back_percentage, left_percentage, right_percentage;

    front_percentage = (analogRead(FRONT_PHOTORESISTOR_PIN) - FRONT_PHOTORESISTOR_MIN) / FRONT_PHOTORESISTOR_RATIO;
    back_percentage = (analogRead(BACK_PHOTORESISTOR_PIN) - BACK_PHOTORESISTOR_MIN) / BACK_PHOTORESISTOR_RATIO;
    left_percentage = (analogRead(LEFT_PHOTORESISTOR_PIN) - LEFT_PHOTORESISTOR_MIN) / LEFT_PHOTORESISTOR_RATIO;
    right_percentage = (analogRead(RIGHT_PHOTORESISTOR_PIN) - RIGHT_PHOTORESISTOR_MIN) / RIGHT_PHOTORESISTOR_RATIO;

    lx = (front_percentage - back_percentage) * VELOCITY_FACTOR;
    ly = (left_percentage - right_percentage) * VELOCITY_FACTOR;
    if (lx > MAX_LINEAR_VELOCITY) lx = MAX_LINEAR_VELOCITY;
    if (lx > MAX_LINEAR_VELOCITY) lx = MAX_LINEAR_VELOCITY;

    cmd_vel(lx, ly, 0);
}
